variables:
  SUITES_IMAGE: jashbook/datatestsuites:latest
  TAGS_NAME: "aws-test"
  SOURCE_TYPE: ""


default:
  before_script:
    - echo "$CI_PIPELINE_SOURCE"
    - echo "$CI_COMMIT_REF_NAME"
    - echo "$GITLAB_USER_ID"


workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      variables:
        SOURCE_TYPE: "DEFAULT"
        TAGS_NAME: "aws-eks"
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        SOURCE_TYPE: "MR"
    - when: always


stages:
  - build
  - test
  - check-cover
  - helm-install
  - helm-test
  - deploy
  - build-image


.make-build:
  stage: build
  image: $SUITES_IMAGE
  tags:
    - "$GITLAB_USER_ID"
  rules:
    - if: '$SOURCE_TYPE == "MR" || $SOURCE_TYPE == "DEFAULT"'
      when: never
    - when: always
  script:
    - make mod-vendor
    - make lint
    - make

make-test:
  stage: test
  image: $SUITES_IMAGE
  tags:
    - "$GITLAB_USER_ID"
  rules:
    - if: '$SOURCE_TYPE == "MR" || $SOURCE_TYPE == "DEFAULT"'
      when: never
    - when: never
  script:
    - make mod-vendor
    - make test
#  coverage: '/coverage: \d+.\d+% of statements/'
  artifacts:
    paths:
      - ./cover_total.out


.check-cover:
  stage: check-cover
  image: $SUITES_IMAGE
  tags:
    - "$GITLAB_USER_ID"
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: '$SOURCE_TYPE == "MR" || $SOURCE_TYPE == "DEFAULT"'
      when: never
    - when: always
  coverage: '/coverage: \d+.\d+% of statements/'
  script:
    - make check-cover


.helm-install:
  stage: helm-install
  image: $SUITES_IMAGE
  tags:
    - "$GITLAB_USER_ID"
  rules:
    - if: '$SOURCE_TYPE == "MR" || $SOURCE_TYPE == "DEFAULT"'
      when: never
    - when: always
  script:
    - make helm-install

.helm-test:
  stage: helm-test
  image: $SUITES_IMAGE
  needs:
    - job: helm-install
      optional: true
  tags:
    - "$GITLAB_USER_ID"
  rules:
    - if: '$SOURCE_TYPE == "MR" || $SOURCE_TYPE == "DEFAULT"'
      when: never
    - when: always
  script:
    - make helm-test


.make-build-mr:
  stage: build
  image: $SUITES_IMAGE
  tags:
    - "$TAGS_NAME"
  rules:
    - if: '$SOURCE_TYPE == "MR" || $SOURCE_TYPE == "DEFAULT"'
      when: always
  script:
    - make mod-vendor
    - make lint
    - make

.make-test-mr:
  stage: test
  image: $SUITES_IMAGE
  tags:
    - "$TAGS_NAME"
  rules:
    - if: '$SOURCE_TYPE == "MR" || $SOURCE_TYPE == "DEFAULT"'
      when: always
  coverage: '/coverage: \d+.\d+% of statements/'
  script:
    - make mod-vendor
    - make test


.helm-install-mr:
  stage: helm-install
  image: $SUITES_IMAGE
  tags:
    - "$TAGS_NAME"
  rules:
    - if: '$SOURCE_TYPE == "MR" || $SOURCE_TYPE == "DEFAULT"'
      when: always
  script:
    - make helm-install

.helm-test-mr:
  stage: helm-test
  image: $SUITES_IMAGE
  needs:
    - job: helm-install-mr
      optional: true
  tags:
    - "$TAGS_NAME"
  rules:
    - if: '$SOURCE_TYPE == "MR" || $SOURCE_TYPE == "DEFAULT"'
      when: always
  script:
    - make helm-test


#docker-image:
#  image: docker:20.10.16
#  stage: build-image
#  rules:
#    - if: '$SOURCE_TYPE == "DEFAULT"'
#      when: always
#  services:
#    - docker:20.10.16-dind
#  script:
#    - echo "build docker image"
#    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
#    - docker build -t $CI_REGISTRY_IMAGE:latest .
#    - docker push $CI_REGISTRY_IMAGE:latest

.docker-image:
  image: $SUITES_IMAGE
  stage: build-image
  tags:
    - "$TAGS_NAME"
  rules:
    - if: '$SOURCE_TYPE == "DEFAULT"'
      when: always
  services:
    - docker:20.10.5-dind
  script:
#    - docker network ls
#    - docker version
#    - make mod-vendor
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
    - make docker-build
    - make docker-push

