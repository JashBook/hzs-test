name: CICD-PUSH

on:
  workflow_dispatch:
    inputs:
      KUBECTL_VERSION:
        description: "Install the specify version of kubectl"
        type: string
        required: false
        default: 'latest'
      VERSION:
        description: "The release version"
        type: string
        required: false
        default: 'latest'
  push:
  release:
    types:
      - published
#    branches:
#      - '*'
#      - '*/*'
#    tags-ignore:
#      - '*'

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  REL_VERSION: ${GITHUB_REF/refs\/heads\//}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  RELEASE_BOT_WEBHOOK: ${{ secrets.RELEASE_BOT_WEBHOOK }}
  DOCKER_USER: ${{ secrets.DOCKER_REGISTRY_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_REGISTRY_PASSWORD }}


jobs:
#  delete-image:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: delete dockerhub image
#        run: |
#          script -e -c "bash ${{ github.workspace }}/.github/utils/utils.sh \
#              --type 13 \
#              --tag-name latest-bak \
#              --user ${{ env.DOCKER_USER }} \
#              --password \"${{ env.DOCKER_PASSWORD }}\""
#
#  delete-aliyun-image:
#    runs-on: macos-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: install skopeo
#        run: |
#          brew install skopeo
#
#      - name: delete aliyun registry image
#        run: |
#          bash ${{ github.workspace }}/.github/utils/utils.sh \
#              --type 14 \
#              --tag-name latest-bak \
#              --user ${{ env.ALIYUN_USER }} \
#              --password "${{ env.ALIYUN_PASSWORD }}"

  merge-relase:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: get base commit id
        id: get_base_commit_id
        run: |
          file_log="$(date +%Y-%m-%d-%T)".log
          cp .github/utils/2023-06-18-14_47_08.txt ${file_log}
          echo "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> ${file_log}
          echo 'FILE_LOG='${file_log} >> $GITHUB_ENV
          cat.github/utils/2023-06-18-14_47_08.txt|grep '【FAILED】' 
          test_ret="$( cat.github/utils/2023-06-18-14_47_08.txt|grep '【FAILED】'  )"
          if [[ -n "$test_ret" ]]; then
              echo "1"
          else
              echo "2"
          fi
          
          test_ret="$(cat "${file_log}"  |grep '【FAILED】' )"
          if [[ -n "$test_ret" ]]; then
              echo "1"
          else
              echo "2"
          fi
        
          test_ret="$(cat "${FILE_LOG}"| grep '【FAILED】'  )"
          if [[ -n "$test_ret" ]]; then
              echo "1"
          else
              echo "2"
          fi
#
#
#          find --help
#          # find ./* -maxdepth 1 -type f -name '*_test.go'
#          find ./* -maxdepth 1 -type d
#
#
#          test="$(git rev-list ${{ github.ref_name }})"
#          main="$(git rev-list origin/main)"
#          for commit1 in $( echo "$test" ); do
#            found=0
#            for commit2 in $( echo "$main" ); do
#              if [[ "$commit1" == "$commit2" ]]; then
#                BASE_COMMIT_ID=$commit1
#                echo $BASE_COMMIT_ID
#                echo base_commit_id=$BASE_COMMIT_ID >> $GITHUB_OUTPUT
#                found=1
#                break
#              fi
#            done
#            if [[ $found -eq 1 ]]; then
#              break
#            fi
#          done

#      - name: get current commit
#        run: |
#          echo ${{ github.event.pull_request.base.ref }}
#          echo ${{ github.event.pull_request.base.sha }}
#          echo ${{ github.event.pull_request.head.ref }}
#          echo ${{ github.event.pull_request.head.sha }}
#
#          git branch
#          git rev-list -1 ${{ github.ref_name }}
#          echo ${{ github.sha }}
#          echo ${{ steps.get_base_commit_id.outputs.base_commit_id }}
#          git diff --name-only ${{ github.sha }} ${{ steps.get_base_commit_id.outputs.base_commit_id }}
#          echo "1"
          
    

#          for release in $(echo "${{ inputs.VERSION }}" | sed 's/|/ /g'); do
#              script -e -c " echo \"$(date "+%Y-%m-%d-%T"):$release\" "
#          done
#          docker version
#          echo "$(date "+%Y-%m-%d-%T")"
#          df -T
#          cat /etc/fstab
#          lsblk -f
#          sleep 60
#          if [[ -z "${{ inputs.KUBECTL_VERSION }}" ]]; then
#            exit 1
#          fi
          
#  send-message:
#    runs-on: ubuntu-latest
#    needs: merge-relase
#    if: ${{ failure() || cancelled() }}
#    steps:
#      - uses: actions/checkout@v3
#      - name: send message
#        run: |
#          bash .github/utils/utils.sh --type 12 \
#            --content "send-message\u00a0error" \
#            --bot-webhook ${{ env.RELEASE_BOT_WEBHOOK }} \
#            --run-url "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
#
#  send-message2:
#    runs-on: ubuntu-latest
#    needs: merge-relase
#    if: ${{ always() && github.event.action == 'published' }}
#    steps:
#      - uses: actions/checkout@v3
#      - name: send message
#        run: |
#          CONTENT="send-message2\u00a0chart\u00a0error"
#          if [[ "${{ needs.merge-relase.result }}" == "success" ]]; then
#              CONTENT="send-message2\u00a0chart\u00a0success"
#          fi
#
#          bash .github/utils/utils.sh --type 12 \
#            --content "${CONTENT}" \
#            --bot-webhook ${{ env.RELEASE_BOT_WEBHOOK }} \
#            --run-url "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
#
#  send-message3:
#    runs-on: ubuntu-latest
#    needs: merge-relase
#    if: ${{ always() }}
#    steps:
#      - uses: actions/checkout@v3
#      - name: send message
#        run: |
#          CONTENT="send-message3\u00a0chart\u00a0error"
#          if [[ "${{ needs.merge-relase.result }}" == "success" ]]; then
#              CONTENT="send-message3\u00a0chart\u00a0success"
#          fi
#
#          bash .github/utils/utils.sh --type 12 \
#            --content "${CONTENT}" \
#            --bot-webhook ${{ env.RELEASE_BOT_WEBHOOK }} \
#            --run-url "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
#

#      - uses: actions/checkout@v3
#      - name: merge releasing to release
#        if: ${{ startsWith(github.ref_name, 'releasing-') }}
#        run: |
#          git checkout -b release-0.3
#          git merge ${{ github.ref_name }}
#          git push --set-upstream origin release-0.3

#  test-macos-docker:
#    runs-on: macos-latest
#    steps:
#      - name: Install Docker Desktop
#        run: |
#          curl -fsSL https://desktop.docker.com/mac/main/amd64/Docker.dmg -o Docker.dmg
#          open Docker.dmg
#          sudo cp -r /Applications/Docker.app /Applications/
#
#      - name: Start Docker Desktop
#        run: open /Applications/Docker.app
#
#      - name: Verify Docker installation
#        run: docker version

  #  deploy:
  #    uses: JashBook/hzs-test/.github/workflows/trigger-workflow.yml@support/add_doc
  #    with:
  #      GITHUB_REPO: "test"
  #      BRANCH_NAME: "test"
  #      WORKFLOW_ID: "test"
  #    secrets: inherit

#  trigger-mode:
#    runs-on: ubuntu-latest
#    outputs:
#      trigger-mode: ${{ steps.get_trigger_mode.outputs.trigger_mode }}
#    steps:
#      - uses: actions/checkout@v3
#      - uses: aws-actions/setup-sam@v2
#        with:
#          use-installer: true
#      - uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: cn-northwest-1
#      - uses: azure/setup-kubectl@v3
#        with:
#          version: "${{ inputs.KUBECTL_VERSION }}"
#      - name: test
#        run: |
#          aws eks update-kubeconfig --region cn-northwest-1 --name ${EKS_CLUSTER_NAME}
#          kubectl get pod -A
#          mkdir -p ~/.kube
#          touch ~/.kube/config
#          echo "${KUBE_CONFIG}" > ~/.kube/config
#          export KUBECONFIG=~/.kube/config
#          TAG_NAME=$( git describe --tags --dirty --always --abbrev=12 )
#          echo "TAG_NAME:"$TAG_NAME
#          echo "${{ env.REL_VERSION }}"
#      - uses: actions/checkout@v3
##      - uses: uraimo/run-on-arch-action@v2
##        name: Run commands
##        id: runcmd
##        with:
##          arch: aarch64
##          distro: ubuntu_latest
##          githubToken: ${{ github.token }}
##          run: |
##            uname -a
##            echo ::set-output name=uname::$(uname -a)
##            apt-get update
##            apt-get install -y --no-install-recommends docker.io
##            docker pull busybox
##            docker inspect busybox
#      - name: Push cli doc changes
#        uses: ad-m/github-push-action@master
#        with:
#          github_token: ${{ env.GITHUB_TOKEN }}
#          branch: ${{ github.ref }}
#      - name: TRIGGER_MODE
#        run: |
#          TRIGGER_MODE=`bash .github/utils/utils.sh --type 6`
#          echo $TRIGGER_MODE
#          echo trigger_mode=$TRIGGER_MODE >> $GITHUB_OUTPUT

#  pre-push:
##    needs: trigger-mode
#    runs-on: ubuntu-latest
##    name: Push Pre-Check
#    steps:
#      - uses: actions/checkout@v3
#      - name: check image
#        run: |
#            bash .github/utils/utils.sh --type 7
##      - name: Spell Check with Typos
#        if: contains(needs.trigger-mode.outputs.trigger-mode, '[docs]')
#        uses: crate-ci/typos@v1.13.14
#        with:
#          files: docs/
#          config: .github/utils/typos.toml
#
#  make-test:
#    needs: trigger-mode
#    runs-on: ubuntu-latest
#    if: contains(needs.trigger-mode.outputs.trigger-mode, '[test]')
#    steps:
#      - name: make test
#        run: echo ${{ needs.trigger-mode.outputs.trigger-mode }}
#
#  check-image:
#    needs: trigger-mode
#    if: contains(needs.trigger-mode.outputs.trigger-mode, '[docker]')
#    runs-on: ubuntu-latest
#    steps:
#      - name: check image
#        run: echo ${{ needs.trigger-mode.outputs.trigger-mode }}
#
#  check-helm:
#    needs: trigger-mode
#    if: contains(needs.trigger-mode.outputs.trigger-mode, '[deploy]')
#    runs-on: ubuntu-latest
#    steps:
#      - name: check helm
#        run: echo ${{ needs.trigger-mode.outputs.trigger-mode }}
