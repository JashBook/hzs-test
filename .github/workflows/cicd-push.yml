name: CICD-PUSH

on:
  workflow_dispatch:
    inputs:
      KUBECTL_VERSION:
        description: "Install the specify version of kubectl"
        type: string
        required: false
        default: 'latest'
  push:
#    branches:
#      - '*'
#      - '*/*'
#    tags-ignore:
#      - '*'

env:
  GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
  REL_VERSION: ${GITHUB_REF/refs\/heads\//}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}


jobs:
  merge-relase:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: merge releasing to release
        if: ${{ startsWith(github.ref_name, 'releasing-') }}
        run: |
          git fetch
          git switch release-0.4
          git merge origin/${{ github.ref_name }}
          git push --set-upstream origin release-0.4

#  test-macos-docker:
#    runs-on: macos-latest
#    steps:
#      - name: Install Docker Desktop
#        run: |
#          curl -fsSL https://desktop.docker.com/mac/main/amd64/Docker.dmg -o Docker.dmg
#          open Docker.dmg
#          sudo cp -r /Applications/Docker.app /Applications/
#
#      - name: Start Docker Desktop
#        run: open /Applications/Docker.app
#
#      - name: Verify Docker installation
#        run: docker version

  #  deploy:
  #    uses: JashBook/hzs-test/.github/workflows/trigger-workflow.yml@support/add_doc
  #    with:
  #      GITHUB_REPO: "test"
  #      BRANCH_NAME: "test"
  #      WORKFLOW_ID: "test"
  #    secrets: inherit

#  trigger-mode:
#    runs-on: ubuntu-latest
#    outputs:
#      trigger-mode: ${{ steps.get_trigger_mode.outputs.trigger_mode }}
#    steps:
#      - uses: actions/checkout@v3
#      - uses: aws-actions/setup-sam@v2
#        with:
#          use-installer: true
#      - uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: cn-northwest-1
#      - uses: azure/setup-kubectl@v3
#        with:
#          version: "${{ inputs.KUBECTL_VERSION }}"
#      - name: test
#        run: |
#          aws eks update-kubeconfig --region cn-northwest-1 --name ${EKS_CLUSTER_NAME}
#          kubectl get pod -A
#          mkdir -p ~/.kube
#          touch ~/.kube/config
#          echo "${KUBE_CONFIG}" > ~/.kube/config
#          export KUBECONFIG=~/.kube/config
#          TAG_NAME=$( git describe --tags --dirty --always --abbrev=12 )
#          echo "TAG_NAME:"$TAG_NAME
#          echo "${{ env.REL_VERSION }}"
#      - uses: actions/checkout@v3
##      - uses: uraimo/run-on-arch-action@v2
##        name: Run commands
##        id: runcmd
##        with:
##          arch: aarch64
##          distro: ubuntu_latest
##          githubToken: ${{ github.token }}
##          run: |
##            uname -a
##            echo ::set-output name=uname::$(uname -a)
##            apt-get update
##            apt-get install -y --no-install-recommends docker.io
##            docker pull busybox
##            docker inspect busybox
#      - name: Push cli doc changes
#        uses: ad-m/github-push-action@master
#        with:
#          github_token: ${{ env.GITHUB_TOKEN }}
#          branch: ${{ github.ref }}
#      - name: TRIGGER_MODE
#        run: |
#          TRIGGER_MODE=`bash .github/utils/utils.sh --type 6`
#          echo $TRIGGER_MODE
#          echo trigger_mode=$TRIGGER_MODE >> $GITHUB_OUTPUT

#  pre-push:
##    needs: trigger-mode
#    runs-on: ubuntu-latest
##    name: Push Pre-Check
#    steps:
#      - uses: actions/checkout@v3
#      - name: check image
#        run: |
#            bash .github/utils/utils.sh --type 7
##      - name: Spell Check with Typos
#        if: contains(needs.trigger-mode.outputs.trigger-mode, '[docs]')
#        uses: crate-ci/typos@v1.13.14
#        with:
#          files: docs/
#          config: .github/utils/typos.toml
#
#  make-test:
#    needs: trigger-mode
#    runs-on: ubuntu-latest
#    if: contains(needs.trigger-mode.outputs.trigger-mode, '[test]')
#    steps:
#      - name: make test
#        run: echo ${{ needs.trigger-mode.outputs.trigger-mode }}
#
#  check-image:
#    needs: trigger-mode
#    if: contains(needs.trigger-mode.outputs.trigger-mode, '[docker]')
#    runs-on: ubuntu-latest
#    steps:
#      - name: check image
#        run: echo ${{ needs.trigger-mode.outputs.trigger-mode }}
#
#  check-helm:
#    needs: trigger-mode
#    if: contains(needs.trigger-mode.outputs.trigger-mode, '[deploy]')
#    runs-on: ubuntu-latest
#    steps:
#      - name: check helm
#        run: echo ${{ needs.trigger-mode.outputs.trigger-mode }}
